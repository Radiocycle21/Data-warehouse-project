
/*
===============================================================================================

DDL Script: create Silver tables

===============================================================================================

Script Purpose: 

    This script creates tables in he 'Silver' schema, dropping existing tabels if they already exists.
    Run this script to re-define the DDL struture of 'Silver' table

===============================================================================================
*/



-- create SQL DDL scripts for all CSV files in the CRM and ERP systems 

If object_ID ('Silver.crm_cust_info', 'U') is NOT NULL
    drop table Silver.crm_cust_info;

create table Silver.crm_cust_info (
    cst_id int,
    cst_key nvarchar(50),
    cst_firstname nvarchar(50),
    cst_lastname nvarchar(50),
    cst_marital_status nvarchar (50),
    cst_gndr nvarchar(50),
    cst_create_date date,
    dwh_create_date DATETIME2 default getdate()
);


If object_ID ('Silver.crm_prd_info', 'U') is NOT NULL
    drop table Silver.crm_prd_info;

create table Silver.crm_prd_info (
    prd_id int,
    cat_id NVARCHAR(50),
    prd_key nvarchar(50),
    prd_nm nvarchar(50),
    prd_cost INT,
    prd_line nvarchar(50),
    prd_start_dt date,
    prd_end_dt date,
    dwh_create_date DATETIME2 default getdate()
);

If object_ID ('Silver.crm_sales_details', 'U') is NOT NULL
    drop table Silver.crm_sales_details;

create table Silver.crm_sales_details (
   sls_ord_num  NVARCHAR(50),
    sls_prd_key  NVARCHAR(50),
    sls_cust_id  INT,
    sls_order_dt date,
    sls_ship_dt  date,
    sls_due_dt   date,
    sls_sales    INT,
    sls_quantity INT,
    sls_price    INT,
    dwh_create_date DATETIME2 default getdate()
);

If object_ID ('Silver.erp_cust_AZ12', 'U') is NOT NULL
    drop table Silver.erp_cust_AZ12;

create table Silver.erp_cust_AZ12 (
    CID nvarchar (50),
    B_Date date,
    GEN nvarchar(50),
    dwh_create_date DATETIME2 default getdate()
);

If object_ID ('Silver.erp_loc_a101', 'U') is NOT NULL
    drop table Silver.erp_loc_a101;

create table Silver.erp_loc_a101 (
    cid nvarchar(50),
    cntry nvarchar(50),
    dwh_create_date DATETIME2 default getdate()
);

If object_ID ('Silver.erp_PX_CAT_G1V2', 'U') is NOT NULL
    drop table Silver.erp_PX_CAT_G1V2;

create table Silver.erp_PX_CAT_G1V2 (
    ID nvarchar (50),
    CAT Nvarchar (50),
    Subcat nvarchar (50),
    maintenace nvarchar(50),
    dwh_create_date DATETIME2 default getdate()
);

/*
==========================================================================================================
-- loading silver.crm_cust_info-- 

-- step 1: check for nulls or duplicates in primary key
-- Expectation: no Result
-- step 2: check for unwanted spaces in first and last names 
-- Expectation: No results 
-- Step 3: Data Standardization and Consistancy in the gender and material statuses
-- Expectation: Looks same and consistant

==========================================================================================================
*/

truncate table silver.crm_cust_info;

Insert into silver.crm_cust_info (
    cst_id,
    cst_key,
    cst_firstname,
    cst_lastname,
    cst_marital_status,
    cst_gndr,
    cst_create_date
)
select 
    cst_id,
    cst_key,
    TRIM(cst_firstname) as cst_firstname,
    TRIM(cst_lastname) as cst_lastname,
    CASE 
        when UPPER(TRIM(cst_marital_status)) = 'S' then 'Single'
        when UPPER(TRIM(cst_marital_status)) = 'M' then 'Married'
        else 'N/A'
    end as cst_marital_status,
    CASE 
        when UPPER(TRIM(cst_gndr)) = 'F' then 'Female'
        when UPPER(TRIM(cst_gndr)) = 'M' then 'Male'
        else 'N/A'
    end as cst_gndr,
    cst_create_date
from (
    select 
    *,
    row_number() over (partition by cst_id order by cst_create_date desc) as flag_last
    from bronze.crm_cust_info
    where cst_id is not null
)t where flag_last = 1

select * from silver.crm_cust_info;


/*
==========================================================================================================
-- loading silver.crm_prd_info -- 

-- step 1: check for nulls or duplicates in primary key
-- Expectation: no Result
-- step 2: split the prd_key into cat_id and prd_key
-- Expectation: two new columns
-- Step 3: Data Standardization and Consistancy in the gender and material statuses
-- Expectation: Looks same and consistant
-- Step 4: check for invalid date orders
-- Expectation: start date is smaller than the end date

==========================================================================================================
*/

truncate table silver.crm_prd_info;

insert into silver.crm_prd_info (
    prd_id,
    cat_id,
    prd_key,
    prd_nm,
    prd_cost,
    prd_line,
    prd_start_dt,
    prd_end_dt
)
select 
    prd_id,
    replace(substring(prd_key, 1, 5), '-', '_') as cat_id,
    substring(prd_key, 7, len(prd_key)) as prd_key,
    prd_nm,
    COALESCE(prd_cost, 0) as prd_cost,
    case 
        when upper(trim(prd_line)) = 'M' then 'Mountain'
        when upper(trim(prd_line)) = 'R' then 'Road'
        when upper(trim(prd_line)) = 'S' then 'Other Sales'
        when upper(trim(prd_line)) = 'T' then 'Touring'
        Else 'N/A'
    End as prd_line,
    cast(prd_start_dt as date) as prd_start_dt,
    cast(lead(prd_start_dt) over (partition by prd_key order by prd_start_dt)- 1 as date) as prd_end_dt
from bronze.crm_prd_info;

 select * from silver.crm_prd_info;


/*
==========================================================================================================
-- loading silver.crm_sales_details -- 

-- step 1: check for nulls or duplicates in primary key
-- Expectation: no Result
-- step 2: check the date formats
-- Expectation: correct date format
-- Step 3: Data Standardization and Consistancy in sales, quantity and price columns
-- Expectation: uniform data

==========================================================================================================
*/

truncate table silver.crm_sales_details;

Insert into silver.crm_sales_details (
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    sls_order_dt,
    sls_ship_dt,
    sls_due_dt,
    sls_sales,
    sls_quantity,
    sls_price
)
select 
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    case 
        when sls_order_dt = 0 or len(sls_order_dt) != 8 then null
        else cast(cast(sls_order_dt as varchar) as date)
    end as sls_order_dt,
    case 
        when sls_ship_dt = 0 or len(sls_ship_dt) != 8 then null
        else cast(cast(sls_ship_dt as varchar) as date)
    end as sls_ship_dt,
    case 
        when  sls_due_dt = 0 or len(sls_due_dt) != 8 then null
        else cast(cast(sls_due_dt as varchar) as date)
    end as sls_due_dt,
    case 
        when sls_sales is null or sls_sales <=0 or sls_sales != sls_quantity * abs(sls_price)
            then sls_quantity * ABS(sls_price)
        else sls_sales
    end as sls_sales,
    sls_quantity,
    case 
        when sls_price is null or sls_price <=0 
            then sls_sales / nullif(sls_quantity, 0)
        else sls_price 
    end as sls_price
from bronze. crm_sales_details;

select * from silver.crm_sales_details;

/*
==========================================================================================================
-- loading silver.erp_cust_AZ12 -- 

-- step 1: check for nulls or duplicates in primary key
-- Expectation: no Result
-- step 2: check the out of Range dates
-- Expectation: correct dates

==========================================================================================================
*/

truncate table silver.erp_cust_AZ12;

insert into silver.erp_cust_AZ12(
    cid,
    B_Date,
    GEN
)
select 
   case 
        when cid like 'NAS%' then substring(cid, 4, len(cid))
        else cid 
    end as cid,
    case 
        when b_date > getdate() then null
        else B_Date
    end as b_date, 
    case 
        when upper(trim(replace(replace(gen, char(13), ''), char(10), ''))) in ('F', 'FEMALE') THEN 'Female'
        when upper(trim(replace(replace(gen, char(13), ''), char(10), ''))) in ('M', 'MALE') THEN 'Male'
        else 'N/A'
    end as gen
from bronze.erp_cust_AZ12;

select * from Silver.erp_cust_AZ12;

/*
==========================================================================================================
-- loading silver.erp_loc_a101 -- 

-- step 1: check for nulls or duplicates or any inconsistancy in primary key
-- Expectation: no Result
-- step 2: check the data standardizationa and consistancy
-- Expectation: correct consistant data

==========================================================================================================
*/

truncate table silver.erp_loc_a101;

insert into silver.erp_loc_a101(
    cid,
    cntry
)
select
    REPLACE(cid, '-', '') as cid,
    case
        when trim(replace(replace(cntry, char(13), ''), char(10), '')) = 'DE' then 'Germany'
        when trim(replace(replace(cntry, char(13), ''), char(10), '')) in ('US', 'USA') then 'United States'
        when trim(replace(replace(cntry, char(13), ''), char(10), '')) = '' or cntry is null then 'N/A'
        else trim(replace(replace(cntry, char(13), ''), char(10), ''))
    end as cntry
from Bronze.erp_loc_a101;

select * from silver.erp_loc_a101;

/*
==========================================================================================================
-- loading silver.erp_px_cat_g1v2-- 

-- step 1: check for unwanted spaces
-- Expectation: no spaces
-- step 2: data standardizationa and consistancy
-- Expectation: correct consistant data

==========================================================================================================
*/

truncate table silver.erp_px_cat_g1v2;

insert into silver.erp_px_cat_g1v2( 
    id, 
    cat,
    Subcat,
    maintenace
)
select 
    id,
    cat,
    subcat,
    trim(replace(replace(maintenace, char(13), ''), char(10), '')) as maintenace
from bronze.erp_PX_CAT_G1V2;

select * from silver.erp_PX_CAT_G1V2;